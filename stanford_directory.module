<?php
/**
 * @file
 * File description
 *
 * Long description
 */

/**
 * Implements hook_help().
 */
function stanford_directory_help($path, $arg) {
  switch ($path) {
    // Main module help for the stanford_directory module.
    case 'stanford_directory':
      return '<p>' . t('Please see the !config', array('!config' => l("cofiguration page", "admin/config/stanford/directory"))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function stanford_directory_menu() {
  $items['admin/config/stanford/directory'] = array(
    'title' => 'Stanford Directory',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_directory_configuration_form'),
    'access arguments' => array('administer stanford directory'),
    'file' => "stanford_directory.admin.inc",
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function stanford_directory_permission() {
  return array(
    'administer stanford directory' => array(
      'title' => t('Administer Stanford Directory'),
      'description' => t('Administer configuration settings for the Stanford Directory module.'),
    ),
  );
}

/**
 * Adds the field group and fields to a node type for the service directory.
 * @param string $node_type
 *   The name of the node bundle.
 */
function stanford_directory_add_service_directory($node_type) {

  if (empty($node_type)) {
    throw new Exception("Node type must be provided.");
  }

  $instances = service_directory_get_field_instance_information($node_type);
  foreach ($instances as $instance_name => $instance) {
    $is_created = field_read_instance("node", $instance['field_name'], $node_type);
    if (!$is_created) {
      field_create_instance($instance);
    }
  }

  // Get the field group definition from our helper function.
  $field_group = stanford_directory_get_field_group_field_information($node_type);
  // Need to repackage the ctools export a bit.
  foreach ($field_group->data as $data_key => $data_item) {
    $field_group->{$data_key} = $data_item;
  }

  // Only save if doesn't exist.
  if (!field_group_exists($field_group->group_name, 'node', $node_type, 'form')) {
    field_group_group_save($field_group);
  }

  drupal_set_message("Enabled service directory fields for: " . $node_type);

}


/**
 * Removes the field group and field instances from a content type.
 *
 * WARNING: This is a destructive function and will delete data from
 * the database. This should have been validated before execution.
 *
 * @param string $node_type
 *   The bundle type name.
 */
function stanford_directory_remove_service_directory($node_type) {

  if (empty($node_type)) {
    throw new Exception("Node type must be provided.");
  }

  // Delete all of the instances.
  $instances = service_directory_get_field_instance_information($node_type);
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance, FALSE);
  }

  // Delete the field group.
  $field_group = stanford_directory_get_field_group_field_information($node_type);
  field_group_group_export_delete($field_group);

  drupal_set_message("Removed all service directory fields from: " . $node_type);

}


/**
 * Returns a field_group configuration object.
 *
 * The default settings for the service directory vertical tab field group.
 * @param string $node_type
 *   A bundle name of a node entity.
 *
 * @return object
 *   A stdClass object of a field group.
 */
function stanford_directory_get_field_group_field_information($node_type) {

  if (empty($node_type)) {
    throw new Exception("Node type must be provided.");
  }

  $field_group = new stdClass();
  $field_group->api_version = 1;
  $field_group->identifier = 'group_stanford_directory|node|' . $node_type . '|form';
  $field_group->group_name = 'group_stanford_directory';
  $field_group->entity_type = 'node';
  $field_group->bundle = $node_type;
  $field_group->mode = 'form';
  $field_group->parent_name = '';
  $field_group->data = array(
    'label' => 'Service Directory',
    'weight' => '40',
    'children' => array(
      0 => 'field_s_directory_is',
      1 => 'field_s_directory_cat',
      2 => 'field_s_directory_aud',
      3 => 'field_s_directory_img',
      4 => 'field_s_directory_title',
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'label' => 'Service Directory',
      'instance_settings' => array(
        'required_fields' => 1,
        'classes' => 'group-service-directory field-group-tab',
        'description' => '',
      ),
      'formatter' => 'open',
    ),
  );
  return $field_group;
}

/**
 * Returns the instance settings for the service directory.
 * @param string $node_type
 *   A valid bundle name for a node entity.
 *
 * @return array
 *   An array of field instance information.
 */
function service_directory_get_field_instance_information($node_type) {

  if (empty($node_type)) {
    throw new Exception("Node type must be provided.");
  }

  $field_instances = array();
  // Exported field_instance: 'node-{$node_type}-field_s_directory_aud'
  $field_instances['node-' . $node_type . '-field_s_directory_aud'] = array(
    'bundle' => $node_type,
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'Select the audience for the service directory',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'taxonomy',
        'settings' => array(
          'custom_link_to_entity' => '',
          'custom_prefix' => '',
          'custom_reverse' => '',
          'custom_strip_preserve' => '',
          'custom_strip_tags' => '',
          'custom_strtolower' => '',
          'custom_strtoupper' => '',
          'custom_suffix' => '',
          'custom_trim' => '',
          'custom_ucfirst' => '',
          'custom_ucwords' => '',
        ),
        'type' => 'taxonomy_term_reference_link',
        'weight' => 9,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_s_directory_aud',
    'label' => 'Audience',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(
        'apply_chosen' => 1,
      ),
      'type' => 'options_select',
      'weight' => 43,
    ),
  );

  // Exported field_instance: 'node-{$node_type}-field_s_directory_cat'
  $field_instances['node-' . $node_type . '-field_s_directory_cat'] = array(
    'bundle' => $node_type,
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'Select a service category',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'taxonomy',
        'settings' => array(
          'custom_link_to_entity' => '',
          'custom_prefix' => '',
          'custom_reverse' => '',
          'custom_strip_preserve' => '',
          'custom_strip_tags' => '',
          'custom_strtolower' => '',
          'custom_strtoupper' => '',
          'custom_suffix' => '',
          'custom_trim' => '',
          'custom_ucfirst' => '',
          'custom_ucwords' => '',
        ),
        'type' => 'taxonomy_term_reference_link',
        'weight' => 8,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_s_directory_cat',
    'label' => 'Category',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(
        'apply_chosen' => 1,
      ),
      'type' => 'options_select',
      'weight' => 42,
    ),
  );

  // Exported field_instance: 'node-{$node_type}-field_s_directory_img'
  $field_instances['node-' . $node_type . '-field_s_directory_img'] = array(
    'bundle' => $node_type,
    'deleted' => 0,
    'description' => 'The image that is displayed on the service directory listing. Required if this content is to be displayed in the directory.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'image',
        'settings' => array(
          'custom_link_to_entity' => '',
          'custom_prefix' => '',
          'custom_reverse' => '',
          'custom_strip_preserve' => '',
          'custom_strip_tags' => '',
          'custom_strtolower' => '',
          'custom_strtoupper' => '',
          'custom_suffix' => '',
          'custom_trim' => '',
          'custom_ucfirst' => '',
          'custom_ucwords' => '',
          'image_link' => '',
          'image_style' => '',
        ),
        'type' => 'image',
        'weight' => 10,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_s_directory_img',
    'label' => 'Directory Image',
    'required' => 0,
    'settings' => array(
      'alt_field' => 1,
      'default_image' => 0,
      'file_directory' => 'stanford_directory',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'title_field' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'image',
      'settings' => array(
        'insert' => 0,
        'insert_absolute' => 0,
        'insert_class' => '',
        'insert_default' => 'auto',
        'insert_styles' => array(),
        'insert_width' => '',
        'preview_image_style' => 'thumbnail',
        'progress_indicator' => 'throbber',
      ),
      'type' => 'image_image',
      'weight' => 44,
    ),
  );

  // Exported field_instance: 'node-{$node_type}-field_s_directory_is'
  $field_instances['node-' . $node_type . '-field_s_directory_is'] = array(
    'bundle' => $node_type,
    'default_value' => array(
      0 => array(
        'value' => 0,
      ),
    ),
    'deleted' => 0,
    'description' => 'Should this content be included in the service directory?',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'list',
        'settings' => array(
          'custom_link_to_entity' => '',
          'custom_prefix' => '',
          'custom_reverse' => '',
          'custom_strip_preserve' => '',
          'custom_strip_tags' => '',
          'custom_strtolower' => '',
          'custom_strtoupper' => '',
          'custom_suffix' => '',
          'custom_trim' => '',
          'custom_ucfirst' => '',
          'custom_ucwords' => '',
        ),
        'type' => 'list_default',
        'weight' => 7,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_s_directory_is',
    'label' => 'Include In Service Directory',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(
        'display_label' => 1,
      ),
      'type' => 'options_onoff',
      'weight' => 41,
    ),
  );

  // Exported field_instance: 'node-{$node_type}-field_s_directory_title'
  $field_instances['node-' . $node_type . '-field_s_directory_title'] = array(
    'bundle' => $node_type,
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'The title to display in the directory',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(
          'custom_link_to_entity' => '',
          'custom_prefix' => '',
          'custom_reverse' => '',
          'custom_strip_preserve' => '',
          'custom_strip_tags' => '',
          'custom_strtolower' => '',
          'custom_strtoupper' => '',
          'custom_suffix' => '',
          'custom_trim' => '',
          'custom_ucfirst' => '',
          'custom_ucwords' => '',
        ),
        'type' => 'text_default',
        'weight' => 11,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_s_directory_title',
    'label' => 'Directory Title',
    'required' => 0,
    'settings' => array(
      'better_formats' => array(
        'allowed_formats' => array(
          'content_editor_text_format' => 'content_editor_text_format',
          'filtered_html' => 'filtered_html',
          'full_html' => 'full_html',
          'plain_text' => 'plain_text',
        ),
        'allowed_formats_toggle' => 0,
        'default_order_toggle' => 0,
        'default_order_wrapper' => array(
          'formats' => array(
            'content_editor_text_format' => array(
              'weight' => -10,
            ),
            'filtered_html' => array(
              'weight' => 0,
            ),
            'full_html' => array(
              'weight' => 1,
            ),
            'plain_text' => array(
              'weight' => 10,
            ),
          ),
        ),
      ),
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 45,
    ),
  );

  return $field_instances;
}
